<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestionnaire de Mots de Passe S√©curis√©</title>
    <meta name="description" content="Gestionnaire de mots de passe avec chiffrement AES-256">
    <meta name="theme-color" content="#4facfe">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="apple-mobile-web-app-title" content="Password Manager">
    <link rel="apple-touch-icon" href="https://placehold.co/192x192/4facfe/white?text=üîí">
    <link rel="manifest" href="/manifest.json">
    <link rel="icon" type="image/png" href="https://placehold.co/192x192/4facfe/white?text=üîí">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 800px;
            overflow: hidden;
            position: relative;
        }

        .offline-indicator {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            background: #dc3545;
            color: white;
            text-align: center;
            padding: 8px;
            font-weight: 600;
            display: none;
            z-index: 100;
        }

        .online-indicator {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            background: #28a745;
            color: white;
            text-align: center;
            padding: 8px;
            font-weight: 600;
            display: none;
            z-index: 100;
        }

        .header {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            font-weight: 700;
        }

        .header p {
            opacity: 0.9;
            font-size: 1.1rem;
        }

        .main-content {
            padding: 30px;
        }

        .install-btn {
            background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 10px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            margin-bottom: 20px;
            width: 100%;
            display: none;
        }

        .master-password-section {
            margin-bottom: 30px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 15px;
            border: 2px solid #e9ecef;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #495057;
        }

        .form-group input {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #dee2e6;
            border-radius: 10px;
            font-size: 16px;
            transition: border-color 0.3s ease;
        }

        .form-group input:focus {
            outline: none;
            border-color: #4facfe;
            box-shadow: 0 0 0 3px rgba(79, 172, 254, 0.1);
        }

        .btn {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 10px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(79, 172, 254, 0.4);
        }

        .btn:active {
            transform: translateY(0);
        }

        .btn-secondary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .password-form {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 20px;
        }

        .password-form .form-group {
            margin-bottom: 0;
        }

        .password-list {
            margin-top: 30px;
        }

        .password-item {
            background: white;
            border: 2px solid #e9ecef;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .password-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            border-color: #4facfe;
        }

        .password-info {
            flex: 1;
        }

        .password-info h3 {
            color: #495057;
            margin-bottom: 5px;
            font-size: 18px;
        }

        .password-info p {
            color: #6c757d;
            font-size: 14px;
        }

        .password-actions {
            display: flex;
            gap: 10px;
        }

        .btn-small {
            padding: 8px 12px;
            font-size: 14px;
            border-radius: 8px;
        }

        .hidden {
            display: none;
        }

        .status-message {
            padding: 15px;
            border-radius: 10px;
            margin: 15px 0;
            text-align: center;
            font-weight: 600;
        }

        .success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .password-display {
            font-family: 'Courier New', monospace;
            background: #f8f9fa;
            padding: 8px 12px;
            border-radius: 6px;
            border: 1px solid #dee2e6;
            word-break: break-all;
        }

        @media (max-width: 768px) {
            .password-form {
                grid-template-columns: 1fr;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .main-content {
                padding: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="offline-indicator" id="offlineIndicator">‚ùå Mode hors ligne</div>
        <div class="online-indicator" id="onlineIndicator">‚úÖ Connect√©</div>
        
        <button id="installBtn" class="install-btn">üì± Installer l'application</button>
        
        <div class="header">
            <h1>üîí Gestionnaire de Mots de Passe</h1>
            <p>Chiffrement AES-256 ‚Ä¢ S√©curit√© maximale</p>
        </div>
        
        <div class="main-content">
            <div id="masterPasswordSection" class="master-password-section">
                <h2>üîë Mot de passe ma√Ætre</h2>
                <p>Entrez votre mot de passe ma√Ætre pour acc√©der √† vos donn√©es</p>
                <div class="form-group">
                    <label for="masterPassword">Mot de passe ma√Ætre :</label>
                    <input type="password" id="masterPassword" placeholder="Entrez votre mot de passe ma√Ætre">
                </div>
                <button id="unlockBtn" class="btn">üîì D√©verrouiller</button>
            </div>

            <div id="passwordManagerSection" class="hidden">
                <div class="form-group">
                    <h2>‚ûï Ajouter un nouveau mot de passe</h2>
                </div>
                <div class="password-form">
                    <div class="form-group">
                        <label for="siteName">Site/Application :</label>
                        <input type="text" id="siteName" placeholder="ex: Gmail, Facebook...">
                    </div>
                    <div class="form-group">
                        <label for="username">Nom d'utilisateur/Email :</label>
                        <input type="text" id="username" placeholder="Votre identifiant">
                    </div>
                </div>
                <div class="form-group">
                    <label for="password">Mot de passe :</label>
                    <input type="password" id="password" placeholder="Mot de passe √† sauvegarder">
                </div>
                <button id="savePasswordBtn" class="btn">üíæ Sauvegarder</button>

                <div id="statusMessage" class="hidden"></div>

                <div class="password-list">
                    <h2>üîê Vos mots de passe sauvegard√©s</h2>
                    <div id="passwordsContainer">
                        <!-- Les mots de passe seront affich√©s ici -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>
    <script>
        // Variables globales
        let encryptedPasswords = [];
        let masterPassword = null;

        // DOM Elements
        const installBtn = document.getElementById('installBtn');
        const offlineIndicator = document.getElementById('offlineIndicator');
        const onlineIndicator = document.getElementById('onlineIndicator');
        const masterPasswordSection = document.getElementById('masterPasswordSection');
        const passwordManagerSection = document.getElementById('passwordManagerSection');
        const masterPasswordInput = document.getElementById('masterPassword');
        const unlockBtn = document.getElementById('unlockBtn');
        const siteNameInput = document.getElementById('siteName');
        const usernameInput = document.getElementById('username');
        const passwordInput = document.getElementById('password');
        const savePasswordBtn = document.getElementById('savePasswordBtn');
        const passwordsContainer = document.getElementById('passwordsContainer');
        const statusMessage = document.getElementById('statusMessage');

        // Fonctions de chiffrement AES-256 s√©curis√©es
        function encryptAES256(data, password) {
            // G√©n√©rer un sel al√©atoire (128 bits)
            const salt = CryptoJS.lib.WordArray.random(128/8);
            // G√©n√©rer un IV al√©atoire (128 bits)
            const iv = CryptoJS.lib.WordArray.random(128/8);
            
            // D√©river la cl√© avec PBKDF2 (10000 it√©rations, SHA256)
            const key = CryptoJS.PBKDF2(password, salt, {
                keySize: 256/32, // 256 bits = 32 octets
                iterations: 10000,
                hasher: CryptoJS.algo.SHA256
            });
            
            // Chiffrer les donn√©es
            const encrypted = CryptoJS.AES.encrypt(data, key, { iv: iv });
            
            // Retourner le sel + IV + ciphertext encod√© en base64
            return salt.toString() + ':' + iv.toString() + ':' + encrypted.toString();
        }

        function decryptAES256(encryptedData, password) {
            try {
                // Extraire le sel, l'IV et le ciphertext
                const parts = encryptedData.split(':');
                if (parts.length !== 3) {
                    throw new Error('Format de donn√©es chiffr√©es invalide');
                }
                
                const salt = CryptoJS.enc.Hex.parse(parts[0]);
                const iv = CryptoJS.enc.Hex.parse(parts[1]);
                const ciphertext = parts[2];
                
                // D√©river la m√™me cl√© avec le m√™me sel
                const key = CryptoJS.PBKDF2(password, salt, {
                    keySize: 256/32,
                    iterations: 10000,
                    hasher: CryptoJS.algo.SHA256
                });
                
                // D√©chiffrer les donn√©es
                const decrypted = CryptoJS.AES.decrypt(ciphertext, key, { iv: iv });
                return decrypted.toString(CryptoJS.enc.Utf8);
            } catch (error) {
                console.error('Erreur de d√©chiffrement:', error);
                throw new Error('Impossible de d√©chiffrer les donn√©es - mot de passe incorrect ou donn√©es corrompues');
            }
        }

        // Gestion de l'installation PWA
        window.addEventListener('beforeinstallprompt', (e) => {
            e.preventDefault();
            deferredPrompt = e;
            installBtn.style.display = 'block';
        });

        let deferredPrompt = null;
        installBtn.addEventListener('click', async () => {
            if (deferredPrompt) {
                deferredPrompt.prompt();
                const { outcome } = await deferredPrompt.userChoice;
                if (outcome === 'accepted') {
                    installBtn.style.display = 'none';
                }
                deferredPrompt = null;
            }
        });

        // Gestion du statut r√©seau
        function updateNetworkStatus() {
            if (navigator.onLine) {
                offlineIndicator.style.display = 'none';
                onlineIndicator.style.display = 'block';
                setTimeout(() => {
                    onlineIndicator.style.display = 'none';
                }, 3000);
            } else {
                offlineIndicator.style.display = 'block';
                onlineIndicator.style.display = 'none';
            }
        }

        window.addEventListener('online', updateNetworkStatus);
        window.addEventListener('offline', updateNetworkStatus);
        updateNetworkStatus();

        // Gestion du d√©verrouillage
        unlockBtn.addEventListener('click', unlockVault);

        // Gestion de la sauvegarde
        savePasswordBtn.addEventListener('click', savePassword);

        // Charger les donn√©es au d√©marrage
        window.addEventListener('load', () => {
            // Enregistrer le service worker
            if ('serviceWorker' in navigator) {
                navigator.serviceWorker.register('/sw.js')
                    .then(registration => {
                        console.log('Service Worker enregistr√© avec succ√®s');
                    })
                    .catch(error => {
                        console.log('Erreur d\'enregistrement du Service Worker:', error);
                    });
            }
            
            // Charger les donn√©es existantes
            loadStoredData();
        });

        // Fonction de d√©verrouillage
        function unlockVault() {
            const password = masterPasswordInput.value;
            if (!password) {
                showStatus('Veuillez entrer un mot de passe ma√Ætre', 'error');
                return;
            }

            try {
                // Stocker le mot de passe ma√Ætre
                masterPassword = password;
                
                // Charger les mots de passe depuis localStorage
                loadStoredData();
                
                // Afficher l'interface de gestion
                masterPasswordSection.classList.add('hidden');
                passwordManagerSection.classList.remove('hidden');
                loadPasswords();
                showStatus('Coffre-fort d√©verrouill√© avec succ√®s !', 'success');
                masterPasswordInput.value = '';
            } catch (error) {
                showStatus('Erreur lors du d√©verrouillage : ' + error.message, 'error');
                masterPassword = null;
            }
        }

        // Fonction de sauvegarde
        function savePassword() {
            const siteName = siteNameInput.value;
            const username = usernameInput.value;
            const password = passwordInput.value;

            if (!siteName || !username || !password) {
                showStatus('Veuillez remplir tous les champs', 'error');
                return;
            }

            try {
                // Cr√©er l'objet √† chiffrer
                const passwordData = {
                    site: siteName,
                    username: username,
                    password: password,
                    timestamp: new Date().toISOString()
                };

                // Chiffrer avec AES-256 s√©curis√©
                const encrypted = encryptAES256(JSON.stringify(passwordData), masterPassword);

                // Ajouter au tableau
                encryptedPasswords.push(encrypted);
                
                // Sauvegarder dans localStorage
                saveStoredData();
                
                // R√©initialiser le formulaire
                siteNameInput.value = '';
                usernameInput.value = '';
                passwordInput.value = '';
                
                // Recharger l'affichage
                loadPasswords();
                showStatus('Mot de passe sauvegard√© avec succ√®s !', 'success');
            } catch (error) {
                showStatus('Erreur lors de la sauvegarde : ' + error.message, 'error');
            }
        }

        // Charger et afficher les mots de passe
        function loadPasswords() {
            passwordsContainer.innerHTML = '';
            
            if (encryptedPasswords.length === 0) {
                passwordsContainer.innerHTML = '<p style="text-align: center; color: #6c757d; margin-top: 20px;">Aucun mot de passe sauvegard√©</p>';
                return;
            }

            encryptedPasswords.forEach((encryptedData, index) => {
                try {
                    // D√©chiffrer avec AES-256
                    const decryptedData = JSON.parse(decryptAES256(encryptedData, masterPassword));
                    
                    const passwordItem = document.createElement('div');
                    passwordItem.className = 'password-item';
                    passwordItem.innerHTML = `
                        <div class="password-info">
                            <h3>${decryptedData.site}</h3>
                            <p>Utilisateur: ${decryptedData.username}</p>
                            <p class="password-display" id="pwd-${index}">‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢</p>
                        </div>
                        <div class="password-actions">
                            <button class="btn btn-small" onclick="togglePassword(${index}, '${encryptedData.replace(/'/g, "\\'")}')">üëÅÔ∏è</button>
                            <button class="btn btn-small btn-secondary" onclick="deletePassword(${index})">üóëÔ∏è</button>
                        </div>
                    `;
                    passwordsContainer.appendChild(passwordItem);
                } catch (error) {
                    console.error('Erreur de d√©chiffrement:', error);
                    const passwordItem = document.createElement('div');
                    passwordItem.className = 'password-item';
                    passwordItem.innerHTML = `
                        <div class="password-info">
                            <h3>Donn√©es corrompues</h3>
                            <p>${error.message}</p>
                        </div>
                        <div class="password-actions">
                            <button class="btn btn-small btn-secondary" onclick="deletePassword(${index})">üóëÔ∏è</button>
                        </div>
                    `;
                    passwordsContainer.appendChild(passwordItem);
                }
            });
        }

        // Fonction globale pour afficher/masquer le mot de passe
        window.togglePassword = function(index, encryptedData) {
            const pwdElement = document.getElementById(`pwd-${index}`);
            if (pwdElement.textContent === '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢') {
                try {
                    const decryptedData = JSON.parse(decryptAES256(encryptedData, masterPassword));
                    pwdElement.textContent = decryptedData.password;
                } catch (error) {
                    pwdElement.textContent = 'Erreur de d√©chiffrement';
                }
            } else {
                pwdElement.textContent = '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢';
            }
        };

        // Fonction globale pour supprimer un mot de passe
        window.deletePassword = function(index) {
            if (confirm('√ätes-vous s√ªr de vouloir supprimer ce mot de passe ?')) {
                encryptedPasswords.splice(index, 1);
                saveStoredData();
                loadPasswords();
                showStatus('Mot de passe supprim√© avec succ√®s !', 'success');
            }
        };

        // Sauvegarder les donn√©es dans localStorage
        function saveStoredData() {
            try {
                localStorage.setItem('encryptedPasswords', JSON.stringify(encryptedPasswords));
            } catch (error) {
                showStatus('Erreur de sauvegarde : ' + error.message, 'error');
            }
        }

        // Charger les donn√©es depuis localStorage
        function loadStoredData() {
            try {
                const savedData = localStorage.getItem('encryptedPasswords');
                if (savedData) {
                    encryptedPasswords = JSON.parse(savedData);
                } else {
                    encryptedPasswords = [];
                }
            } catch (error) {
                encryptedPasswords = [];
                console.error('Erreur de chargement des donn√©es:', error);
            }
        }

        // Afficher les messages de statut
        function showStatus(message, type) {
            statusMessage.textContent = message;
            statusMessage.className = `status-message ${type} hidden`;
            statusMessage.classList.remove('hidden');
            
            setTimeout(() => {
                statusMessage.classList.add('hidden');
            }, 5000);
        }

        // Appuyer sur Entr√©e pour d√©verrouiller
        masterPasswordInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                unlockVault();
            }
        });
    </script>
</body>
</html>